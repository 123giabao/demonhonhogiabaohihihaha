from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import uuid
import time
import re
import json
import os
from openai import OpenAI

app = Flask(__name__)
app.secret_key = "secret123"

# üîë DeepSeek API Configuration
DEEPSEEK_API_KEY = "sk-474836e4c7b6462d8a9a24ed964b0251"
deepseek_client = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com"
)

# üîë K·∫øt n·ªëi Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name(
    "./credentials.json", 
    scope
)
client = gspread.authorize(creds)

# üìÑ M·ªü sheets
sheet_users = client.open_by_key("1MN8N3lV1Z_ijA8y8aHseHjFxBntPngOnZQ9vQ9EcGsk").sheet1
sheet_problems = client.open_by_key("1fiqngxE_wiskJ19WJz1R43Hvu8UqaqWCp3wgMoe5rP4").sheet1

# Sheet submissions - T·∫°o n·∫øu ch∆∞a c√≥
try:
    sheet_submissions = client.open_by_key("10DpZvCkKwNuKGkgHxDGbLrA1apRlaIGpOEhaxWmi-LA").worksheet("Submissions")
except:
    spreadsheet = client.open_by_key("10DpZvCkKwNuKGkgHxDGbLrA1apRlaIGpOEhaxWmi-LA")
    sheet_submissions = spreadsheet.add_worksheet(title="Submissions", rows="1000", cols="10")
    sheet_submissions.append_row([
        "Username", "Problem", "Language", "Code", "Score", "Result", 
        "Feedback", "Timestamp", "Strengths", "Weaknesses"
    ])

# üÜï Sheet l·ªãch s·ª≠ h·ªçc t·∫≠p (Sheet th·ª© 3)
try:
    sheet_lichsu = client.open_by_key("10DpZvCkKwNuKGkgHxDGbLrA1apRlaIGpOEhaxWmi-LA").worksheet("LichSuHocTap")
except:
    spreadsheet = client.open_by_key("10DpZvCkKwNuKGkgHxDGbLrA1apRlaIGpOEhaxWmi-LA")
    sheet_lichsu = spreadsheet.add_worksheet(title="LichSuHocTap", rows="1000", cols="20")
    sheet_lichsu.append_row([
        "Username", "TotalSubmissions", "AverageScore", "LastUpdated",
        "RecentCodes", "RecentProblems", "RecentScores", "RecentFeedbacks",
        "OverallStrengths", "OverallWeaknesses", "LearningTrend",
        "ThinkingStyle", "FocusAreas", "LastAnalysis"
    ])

# L∆∞u tr·ªØ t·∫°m k·∫øt qu·∫£ submission
submission_results = {}

# üé® Danh s√°ch GIF ng·∫´u nhi√™n
RANDOM_GIFS = [
    "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExcHE3ZnNveGhyYTdvdDFxMnBoZTM4eWg5aDQ3OWJ6N2J5c3Y3ejJpZyZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/26tn33aiTi1jkl6H6/giphy.gif",
    "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExZjBhMmRicnRzNHBvdGw2eHdwZXByeXVob3BqbDk5dXNqc2I0cG1mayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/Dh5q0sShxgp13DwrvG/giphy.gif",
    "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExOXlhOGdxNGV0cWF1OHo1dXdtenB3aGNqNmFyYWo1eGVneGhucjlxdCZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/L8K62iTDkzGX6/giphy.gif",
    "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExNjJ3aGFsd2dnN3RnYmRoMWF6ZnNkMHl6eXh3Y2FvMGVoYzd1dTl1ayZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/JIX9t2j0ZTN9S/giphy.gif",
    "https://i.giphy.com/media/v1.Y2lkPTc5MGI3NjExMnFjN3NncXJydzh3ZDd2OHltYmdvenRmZGhjMW9yNGMxZGNsMmJhcSZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/3oKIPnAiaMCws8nOsE/giphy.gif"
]


def get_correct_answer(problem_title):
    """L·∫•y ƒë√°p √°n ƒë√∫ng t·ª´ Google Sheets"""
    try:
        data = sheet_problems.get_all_values()
        for row in data[1:]:
            if row[0] == problem_title:
                return row[2] if len(row) > 2 else ""
        return None
    except Exception as e:
        print(f"‚ùå L·ªói l·∫•y ƒë√°p √°n: {str(e)}")
        return None


def save_to_lichsu(username, submission_data):
    """L∆∞u l·ªãch s·ª≠ v√†o Sheet LichSuHocTap"""
    try:
        # L·∫•y d·ªØ li·ªáu hi·ªán t·∫°i
        all_data = sheet_lichsu.get_all_values()
        user_row_idx = None
        
        # T√¨m h√†ng c·ªßa user
        for idx, row in enumerate(all_data[1:], start=2):
            if row[0] == username:
                user_row_idx = idx
                break
        
        # L·∫•y submissions g·∫ßn ƒë√¢y c·ªßa user
        recent_submissions = []
        submissions_data = sheet_submissions.get_all_values()
        for row in submissions_data[1:]:
            if row[0] == username:
                recent_submissions.append({
                    'problem': row[1],
                    'code': row[3][:200],  # L∆∞u 200 k√Ω t·ª± ƒë·∫ßu
                    'score': row[4],
                    'feedback': row[6][:100]
                })
        
        # L·∫•y 10 b√†i g·∫ßn nh·∫•t
        recent_submissions = recent_submissions[-10:]
        
        # T√≠nh ƒëi·ªÉm trung b√¨nh
        avg_score = sum([float(s['score']) for s in recent_submissions]) / len(recent_submissions) if recent_submissions else 0
        
        # Chu·∫©n b·ªã d·ªØ li·ªáu
        recent_codes = " ||| ".join([s['code'] for s in recent_submissions])
        recent_problems = " ||| ".join([s['problem'] for s in recent_submissions])
        recent_scores = ", ".join([str(s['score']) for s in recent_submissions])
        recent_feedbacks = " ||| ".join([s['feedback'] for s in recent_submissions])
        
        new_data = [
            username,
            len(recent_submissions),
            round(avg_score, 2),
            time.strftime('%Y-%m-%d %H:%M:%S'),
            recent_codes,
            recent_problems,
            recent_scores,
            recent_feedbacks,
            "",  # OverallStrengths - s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅn khi ph√¢n t√≠ch
            "",  # OverallWeaknesses
            "",  # LearningTrend
            "",  # ThinkingStyle
            "",  # FocusAreas
            ""   # LastAnalysis
        ]
        
        if user_row_idx:
            # Update existing row
            sheet_lichsu.update(f'A{user_row_idx}:N{user_row_idx}', [new_data])
        else:
            # Append new row
            sheet_lichsu.append_row(new_data)
        
        print(f"‚úÖ ƒê√£ l∆∞u l·ªãch s·ª≠ cho {username}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói l∆∞u l·ªãch s·ª≠: {str(e)}")
        return False


def update_analysis_to_lichsu(username, analysis_result):
    """C·∫≠p nh·∫≠t k·∫øt qu·∫£ ph√¢n t√≠ch v√†o Sheet LichSuHocTap"""
    try:
        all_data = sheet_lichsu.get_all_values()
        user_row_idx = None
        
        for idx, row in enumerate(all_data[1:], start=2):
            if row[0] == username:
                user_row_idx = idx
                break
        
        if not user_row_idx:
            return False
        
        # C·∫≠p nh·∫≠t c√°c c·ªôt ph√¢n t√≠ch
        sheet_lichsu.update(f'I{user_row_idx}', [[", ".join(analysis_result.get('strengths', []))]])
        sheet_lichsu.update(f'J{user_row_idx}', [[", ".join(analysis_result.get('weaknesses', []))]])
        sheet_lichsu.update(f'K{user_row_idx}', [[analysis_result.get('learning_trend', '')]])
        sheet_lichsu.update(f'L{user_row_idx}', [[analysis_result.get('thinking_style', '')]])
        sheet_lichsu.update(f'M{user_row_idx}', [[", ".join(analysis_result.get('focus_areas', []))]])
        sheet_lichsu.update(f'N{user_row_idx}', [[time.strftime('%Y-%m-%d %H:%M:%S')]])
        
        print(f"‚úÖ ƒê√£ c·∫≠p nh·∫≠t ph√¢n t√≠ch cho {username}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói c·∫≠p nh·∫≠t ph√¢n t√≠ch: {str(e)}")
        return False


def grade_code_with_deepseek(student_code, correct_answer, problem_title, language):
    """S·ª≠ d·ª•ng DeepSeek ƒë·ªÉ ch·∫•m code"""
    try:
        prompt = f"""B·∫°n l√† gi√°o vi√™n l·∫≠p tr√¨nh chuy√™n nghi·ªáp. H√£y ch·∫•m b√†i c·ªßa h·ªçc sinh.

**ƒê·ªÅ b√†i:** {problem_title}

**ƒê√°p √°n chu·∫©n:**
```{language}
{correct_answer}
```

**Code h·ªçc sinh:**
```{language}
{student_code}
```

H√£y ph√¢n t√≠ch v√† tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng:
{{
    "score": <ƒëi·ªÉm t·ª´ 0-100>,
    "result": "<PASS/FAIL>",
    "feedback": "<nh·∫≠n x√©t t·ªïng quan>",
    "strengths": ["ƒëi·ªÉm m·∫°nh 1", "ƒëi·ªÉm m·∫°nh 2"],
    "weaknesses": ["ƒëi·ªÉm y·∫øu 1", "ƒëi·ªÉm y·∫øu 2"],
    "suggestions": ["g·ª£i √Ω c·∫£i thi·ªán 1", "g·ª£i √Ω 2"]
}}

Ch·∫•m ƒëi·ªÉm d·ª±a tr√™n:
- Logic ƒë√∫ng (40%)
- ƒê·ªô t·ªëi ∆∞u (30%)
- Clean code (20%)
- X·ª≠ l√Ω edge cases (10%)"""

        response = deepseek_client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "B·∫°n l√† gi√°o vi√™n l·∫≠p tr√¨nh chuy√™n nghi·ªáp, tr·∫£ v·ªÅ JSON h·ª£p l·ªá."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.3,
            max_tokens=2000
        )
        
        result_text = response.choices[0].message.content.strip()
        
        # Parse JSON t·ª´ response
        if "```json" in result_text:
            result_text = result_text.split("```json")[1].split("```")[0].strip()
        elif "```" in result_text:
            result_text = result_text.split("```")[1].split("```")[0].strip()
        
        result = json.loads(result_text)
        return result
        
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói parse JSON: {str(e)}")
        return {
            "score": 50,
            "result": "ERROR",
            "feedback": "Kh√¥ng th·ªÉ ph√¢n t√≠ch k·∫øt qu·∫£ t·ª´ AI",
            "strengths": ["Code ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng"],
            "weaknesses": ["H·ªá th·ªëng ch∆∞a ph√¢n t√≠ch ƒë∆∞·ª£c"],
            "suggestions": ["Vui l√≤ng th·ª≠ l·∫°i"]
        }
    except Exception as e:
        print(f"‚ùå L·ªói DeepSeek API: {str(e)}")
        return {
            "score": 0,
            "result": "ERROR",
            "feedback": f"L·ªói k·∫øt n·ªëi AI: {str(e)}",
            "strengths": [],
            "weaknesses": ["Kh√¥ng th·ªÉ ch·∫•m b√†i"],
            "suggestions": ["Ki·ªÉm tra API key ho·∫∑c k·∫øt n·ªëi m·∫°ng"]
        }


def analyze_student_history_with_deepseek(username):
    """Ph√¢n t√≠ch to√†n b·ªô l·ªãch s·ª≠ h·ªçc t·∫≠p c·ªßa h·ªçc sinh b·∫±ng DeepSeek"""
    try:
        # L·∫•y d·ªØ li·ªáu t·ª´ Sheet LichSuHocTap
        all_data = sheet_lichsu.get_all_values()
        user_data = None
        
        for row in all_data[1:]:
            if row[0] == username:
                user_data = row
                break
        
        if not user_data or not user_data[4]:  # Ki·ªÉm tra c√≥ code kh√¥ng
            return {
                "error": "H·ªçc sinh ch∆∞a c√≥ b√†i l√†m n√†o",
                "total_submissions": 0
            }
        
        # Parse d·ªØ li·ªáu
        recent_problems = user_data[5].split(" ||| ") if len(user_data) > 5 else []
        recent_scores = user_data[6].split(", ") if len(user_data) > 6 else []
        recent_feedbacks = user_data[7].split(" ||| ") if len(user_data) > 7 else []
        
        # T·∫°o summary
        submission_summary = "\n\n".join([
            f"""B√†i {i+1}: {recent_problems[i] if i < len(recent_problems) else 'N/A'}
ƒêi·ªÉm: {recent_scores[i] if i < len(recent_scores) else 'N/A'}
Feedback: {recent_feedbacks[i] if i < len(recent_feedbacks) else 'N/A'}"""
            for i in range(min(len(recent_problems), 10))
        ])
        
        prompt = f"""B·∫°n l√† chuy√™n gia ph√¢n t√≠ch gi√°o d·ª•c. H√£y ph√¢n t√≠ch to√†n di·ªán h·ªçc sinh **{username}**.

**L·ªãch s·ª≠ l√†m b√†i (t·ªïng {user_data[1]} b√†i):**
**ƒêi·ªÉm trung b√¨nh: {user_data[2]}**

{submission_summary}

H√£y tr·∫£ v·ªÅ JSON v·ªõi ƒë·ªãnh d·∫°ng:
{{
    "overall_score": <ƒëi·ªÉm trung b√¨nh 0-100>,
    "learning_trend": "<IMPROVING/STABLE/DECLINING>",
    "strengths": ["ƒëi·ªÉm m·∫°nh 1", "ƒëi·ªÉm m·∫°nh 2", "ƒëi·ªÉm m·∫°nh 3"],
    "weaknesses": ["ƒëi·ªÉm y·∫øu 1", "ƒëi·ªÉm y·∫øu 2"],
    "thinking_style": "<m√¥ t·∫£ l·ªëi t∆∞ duy>",
    "recommendations": ["khuy·∫øn ngh·ªã 1", "khuy·∫øn ngh·ªã 2", "khuy·∫øn ngh·ªã 3"],
    "focus_areas": ["ch·ªß ƒë·ªÅ c·∫ßn t·∫≠p trung 1", "ch·ªß ƒë·ªÅ 2"],
    "summary": "<t√≥m t·∫Øt t·ªïng quan 2-3 c√¢u>"
}}

Ph√¢n t√≠ch s√¢u:
- Xu h∆∞·ªõng ti·∫øn b·ªô theo th·ªùi gian
- Phong c√°ch code (clean code, t·ªëi ∆∞u, x·ª≠ l√Ω l·ªói...)
- Kh·∫£ nƒÉng logic v√† thu·∫≠t to√°n
- ƒêi·ªÉm c·∫ßn c·∫£i thi·ªán ∆∞u ti√™n
- Lu√¥n n√≥i xin ch√†o"""

        response = deepseek_client.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {"role": "system", "content": "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch gi√°o d·ª•c, tr·∫£ v·ªÅ JSON h·ª£p l·ªá."},
                {"role": "user", "content": prompt}
            ],
            temperature=0.4,
            max_tokens=2500
        )
        
        result_text = response.choices[0].message.content.strip()
        
        # Parse JSON
        if "```json" in result_text:
            result_text = result_text.split("```json")[1].split("```")[0].strip()
        elif "```" in result_text:
            result_text = result_text.split("```")[1].split("```")[0].strip()
        
        result = json.loads(result_text)
        result['total_submissions'] = int(user_data[1]) if user_data[1] else 0
        result['recent_scores'] = recent_scores[:5]
        
        # L∆∞u k·∫øt qu·∫£ ph√¢n t√≠ch v√†o Sheet
        update_analysis_to_lichsu(username, result)
        
        return result
        
    except json.JSONDecodeError as e:
        print(f"‚ùå L·ªói parse JSON: {str(e)}")
        return {"error": "Kh√¥ng th·ªÉ ph√¢n t√≠ch d·ªØ li·ªáu"}
    except Exception as e:
        print(f"‚ùå L·ªói ph√¢n t√≠ch: {str(e)}")
        return {"error": str(e)}


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username'].strip()
        password = request.form['password'].strip()
        data = sheet_users.get_all_values()

        for row in data[1:]:
            if row[0] == username and row[1] == password:
                session['user'] = username
                return redirect(url_for('index'))

        return render_template('login.html', error="Sai t√™n ho·∫∑c m·∫≠t kh·∫©u!")

    return render_template('login.html')


@app.route('/')
def index():
    if 'user' not in session:
        return redirect(url_for('login'))
    
    # Random GIF
    import random
    random_gif = random.choice(RANDOM_GIFS)
    
    return render_template('index.html', user=session['user'], random_gif=random_gif)


@app.route('/search', methods=['POST'])
def search():
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403

    query = request.form['query'].lower()
    data = sheet_problems.get_all_values()
    results = []

    for row in data[1:]:
        if query in row[0].lower():
            results.append({'title': row[0], 'content': row[1]})
    return jsonify(results)


@app.route('/get_problem', methods=['POST'])
def get_problem():
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403

    title = request.form['title']
    data = sheet_problems.get_all_values()
    for row in data[1:]:
        if row[0] == title:
            return jsonify({
                'title': row[0],
                'content': row[1],
                'hint1': row[3] if len(row) > 3 else "",
                'hint2': row[4] if len(row) > 4 else "",
                'hint3': row[5] if len(row) > 5 else ""
            })
    return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y ƒë·ªÅ'}), 404


@app.route('/submit_code', methods=['POST'])
def submit_code():
    """Ch·∫•m code tr·ª±c ti·∫øp b·∫±ng DeepSeek"""
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403

    title = request.form['title']
    code = request.form['code']
    language = request.form['language']
    username = session['user']

    submission_id = str(uuid.uuid4())
    
    # L∆∞u tr·∫°ng th√°i processing
    submission_results[submission_id] = {
        'status': 'processing',
        'username': username,
        'problem': title,
        'code': code,
        'language': language,
        'timestamp': time.time()
    }

    try:
        # L·∫•y ƒë√°p √°n t·ª´ Google Sheets
        correct_answer = get_correct_answer(title)
        
        if not correct_answer:
            return jsonify({
                'success': False,
                'message': '‚ùå Kh√¥ng t√¨m th·∫•y ƒë√°p √°n cho b√†i n√†y'
            })
        
        # Ch·∫•m b√†i b·∫±ng DeepSeek
        result = grade_code_with_deepseek(code, correct_answer, title, language)
        
        # L∆∞u k·∫øt qu·∫£ v√†o memory
        submission_results[submission_id] = {
            'status': 'completed',
            'result': result['result'],
            'score': result['score'],
            'feedback': result['feedback'],
            'strengths': result.get('strengths', []),
            'weaknesses': result.get('weaknesses', []),
            'suggestions': result.get('suggestions', []),
            'timestamp': time.time()
        }
        
        # L∆∞u v√†o Google Sheets
        try:
            sheet_submissions.append_row([
                username,
                title,
                language,
                code[:500],
                result['score'],
                result['result'],
                result['feedback'],
                time.strftime('%Y-%m-%d %H:%M:%S'),
                str(result.get('strengths', [])),
                str(result.get('weaknesses', []))
            ])
            print(f"‚úÖ ƒê√£ l∆∞u submission {submission_id} v√†o Google Sheets")
            
            # üÜï L∆∞u v√†o Sheet LichSuHocTap
            save_to_lichsu(username, {
                'problem': title,
                'code': code,
                'score': result['score'],
                'feedback': result['feedback']
            })
            
        except Exception as e:
            print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u v√†o Sheets: {str(e)}")
        
        return jsonify({
            'success': True,
            'submission_id': submission_id,
            'message': 'üéâ Code ƒë√£ ƒë∆∞·ª£c ch·∫•m xong!',
            'immediate_result': submission_results[submission_id]
        })
        
    except Exception as e:
        submission_results[submission_id] = {
            'status': 'error',
            'error': str(e)
        }
        return jsonify({
            'success': False,
            'message': f"‚ùå L·ªói: {str(e)}"
        })


@app.route('/get_result/<submission_id>', methods=['GET'])
def get_result(submission_id):
    """Frontend l·∫•y k·∫øt qu·∫£"""
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403
    
    result = submission_results.get(submission_id)
    
    if not result:
        return jsonify({'error': 'Kh√¥ng t√¨m th·∫•y submission'}), 404
    
    return jsonify(result)


@app.route('/visualize_code', methods=['POST'])
def visualize_code():
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403
    
    try:
        code = request.form.get('code', '')
        language = request.form.get('language', 'python').lower()
        
        if not code.strip():
            return jsonify({'success': False, 'error': 'Code kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng'})
        
        mermaid_code = generate_improved_mermaid(code, language)
        
        return jsonify({'success': True, 'mermaid': mermaid_code})
    
    except Exception as e:
        return jsonify({'success': False, 'error': f"L·ªói t·∫°o s∆° ƒë·ªì: {str(e)}"})


def generate_improved_mermaid(code, language):
    """T·∫°o flowchart t·ª´ code"""
    lines = code.split('\n')
    
    mermaid = "flowchart TD\n"
    mermaid += "    Start([B·∫Øt ƒë·∫ßu])\n"
    
    node_id = 1
    prev_node = "Start"
    
    for line in lines:
        stripped = line.strip()
        if not stripped or stripped.startswith('#') or stripped.startswith('//'):
            continue
        
        current_node = f"N{node_id}"
        display_text = stripped[:50].replace('"', "'").replace('(', '[').replace(')', ']')
        
        is_condition = re.match(r'^\s*(if|elif|else if)\s*', stripped, re.IGNORECASE)
        is_loop = re.match(r'^\s*(for|while)\s*', stripped, re.IGNORECASE)
        
        try:
            if is_condition:
                mermaid += f"    {prev_node} --> {current_node}{{\"{display_text}\"}}\n"
            elif is_loop:
                mermaid += f"    {prev_node} --> {current_node}[\"{display_text}\"]\n"
            else:
                mermaid += f"    {prev_node} --> {current_node}[\"{display_text}\"]\n"
            
            prev_node = current_node
            node_id += 1
            
            if node_id > 30:
                mermaid += f"    {prev_node} --> TooLong[\"...C√≤n nhi·ªÅu code...\"]\n"
                prev_node = "TooLong"
                break
                
        except:
            continue
    
    mermaid += f"    {prev_node} --> End([K·∫øt th√∫c])\n"
    return mermaid


@app.route('/analytics/get_students', methods=['GET'])
def get_students():
    """L·∫•y danh s√°ch h·ªçc sinh t·ª´ Users sheet"""
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403
    
    try:
        data = sheet_users.get_all_values()
        students = []
        
        for row in data[1:]:
            if row[0]:
                students.append({
                    'username': row[0],
                    'name': row[2] if len(row) > 2 and row[2] else row[0]
                })
        
        return jsonify({'success': True, 'students': students})
    
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/analytics/analyze_student', methods=['POST'])
def analyze_student():
    """Ph√¢n t√≠ch h·ªçc sinh b·∫±ng DeepSeek"""
    if 'user' not in session:
        return jsonify({'error': 'Ch∆∞a ƒëƒÉng nh·∫≠p'}), 403
    
    try:
        username = request.form.get('username')
        
        # Ph√¢n t√≠ch b·∫±ng DeepSeek
        result = analyze_student_history_with_deepseek(username)
        
        if 'error' in result:
            return jsonify({
                'success': False,
                'error': result['error']
            })
        
        return jsonify({
            'success': True,
            'data': result
        })
    
    except Exception as e:
        return jsonify({'success': False, 'error': str(e)})


@app.route('/logout')
def logout():
    session.pop('user', None)
    return redirect(url_for('login'))


if __name__ == '__main__':
    import os
    port = int(os.environ.get('PORT', 5000))
    app.run(debug=False, host='0.0.0.0', port=port)
